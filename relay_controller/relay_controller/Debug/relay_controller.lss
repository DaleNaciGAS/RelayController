
relay_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f80  00803f80  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00803f80  00803f80  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea1  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017d2  00000000  00000000  000024f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  00003cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db4  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000577  00000000  00000000  000052f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000586f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e8       	ldi	r26, 0x80	; 128
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 38       	cpi	r26, 0x83	; 131
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	de d1       	rcall	.+956    	; 0x40e <main>
  52:	47 c2       	rjmp	.+1166   	; 0x4e2 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <is_high>:
	}
	
	if (PORTA.IN & EBIKE_PIN) {
		PORTA.OUT |= EBIKE_STATUS_PIN;
	} else {
		PORTA.OUT &= ~EBIKE_STATUS_PIN;
  56:	0f 93       	push	r16
  58:	1f 93       	push	r17
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
  62:	fe 01       	movw	r30, r28
  64:	37 96       	adiw	r30, 0x07	; 7
  66:	01 91       	ld	r16, Z+
  68:	11 91       	ld	r17, Z+
  6a:	60 e0       	ldi	r22, 0x00	; 0
  6c:	70 e0       	ldi	r23, 0x00	; 0
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	0f c0       	rjmp	.+30     	; 0x90 <__DATA_REGION_LENGTH__+0x10>
  72:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
  76:	df 01       	movw	r26, r30
  78:	12 96       	adiw	r26, 0x02	; 2
  7a:	40 81       	ld	r20, Z
  7c:	51 81       	ldd	r21, Z+1	; 0x01
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	24 23       	and	r18, r20
  82:	35 23       	and	r19, r21
  84:	23 2b       	or	r18, r19
  86:	09 f0       	breq	.+2      	; 0x8a <__DATA_REGION_LENGTH__+0xa>
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	6f 5f       	subi	r22, 0xFF	; 255
  8c:	7f 4f       	sbci	r23, 0xFF	; 255
  8e:	fd 01       	movw	r30, r26
  90:	60 17       	cp	r22, r16
  92:	71 07       	cpc	r23, r17
  94:	74 f3       	brlt	.-36     	; 0x72 <is_high+0x1c>
  96:	df 91       	pop	r29
  98:	cf 91       	pop	r28
  9a:	1f 91       	pop	r17
  9c:	0f 91       	pop	r16
  9e:	08 95       	ret

000000a0 <start_signal>:
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	31 f4       	brne	.+12     	; 0xb0 <start_signal+0x10>
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	84 81       	ldd	r24, Z+4	; 0x04
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	84 83       	std	Z+4, r24	; 0x04
  ae:	08 95       	ret
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	29 f4       	brne	.+10     	; 0xbe <start_signal+0x1e>
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	84 81       	ldd	r24, Z+4	; 0x04
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	84 83       	std	Z+4, r24	; 0x04
  be:	08 95       	ret

000000c0 <stop_signal>:
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	31 f4       	brne	.+12     	; 0xd0 <stop_signal+0x10>
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	f4 e0       	ldi	r31, 0x04	; 4
  c8:	84 81       	ldd	r24, Z+4	; 0x04
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	84 83       	std	Z+4, r24	; 0x04
  ce:	08 95       	ret
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	29 f4       	brne	.+10     	; 0xde <stop_signal+0x1e>
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f4 e0       	ldi	r31, 0x04	; 4
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 83       	std	Z+4, r24	; 0x04
  de:	08 95       	ret

000000e0 <start>:
 * 
 * Possible Return States:
 *     - RELAY_OFF
 */
enum State start(void) {
	fault_count = 0;
  e0:	10 92 82 3f 	sts	0x3F82, r1	; 0x803f82 <fault_count>
	
	// Configure input pins
	PORTA.DIR |= PIN1_bm;
  e4:	e0 e0       	ldi	r30, 0x00	; 0
  e6:	f4 e0       	ldi	r31, 0x04	; 4
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	PORTA.DIR |= PIN2_bm;
  ee:	80 81       	ld	r24, Z
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	80 83       	st	Z, r24
	PORTA.DIR |= PIN5_bm;
  f4:	80 81       	ld	r24, Z
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	80 83       	st	Z, r24
	
	// Configure output pins
	PORTA.DIR &= ~PIN3_bm;
  fa:	80 81       	ld	r24, Z
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 83       	st	Z, r24
	PORTA.DIR &= ~PIN4_bm;
 100:	80 81       	ld	r24, Z
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	80 83       	st	Z, r24
	PORTA.DIR &= ~PIN6_bm;
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
	PORTA.DIR &= ~PIN7_bm;
 10c:	80 81       	ld	r24, Z
 10e:	8f 77       	andi	r24, 0x7F	; 127
 110:	80 83       	st	Z, r24
	
	// Enable pull-up config for output pins
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
 116:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
 118:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
 11a:	87 8b       	std	Z+23, r24	; 0x17
		
	return RELAY_OFF;
}
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <relay_off>:
 * Possible Return States:
 *     - RELAY_ENABLE
 */
enum State relay_off(void) {
	while (1) {
		if (is_high(OPENWRT_PIN, EBIKE_PIN)) {			
 120:	1f 92       	push	r1
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	8f 93       	push	r24
 126:	1f 92       	push	r1
 128:	1f 92       	push	r1
 12a:	95 df       	rcall	.-214    	; 0x56 <is_high>
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	88 23       	and	r24, r24
 136:	a1 f3       	breq	.-24     	; 0x120 <relay_off>
			return RELAY_ENABLE;
		}
	}
}
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	08 95       	ret

0000013c <relay_enable>:
 *     - SOFT_GROUND_FAULT
 *     - RELAY_ON
 *     - PROBATIONARY_RELAY_ON
 */
enum State relay_enable(void) {
	start_signal(RELAY_OFF_PIN);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	b0 df       	rcall	.-160    	; 0xa0 <start_signal>
	
	tc = 0;
 140:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <__DATA_REGION_ORIGIN__>
 144:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	while (tc < RELAY_POWER_TIME) {		
 148:	1a c0       	rjmp	.+52     	; 0x17e <relay_enable+0x42>
		if (!is_high(GFI_PIN)) {
 14a:	1f 92       	push	r1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8f 93       	push	r24
 150:	82 df       	rcall	.-252    	; 0x56 <is_high>
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	81 11       	cpse	r24, r1
 158:	04 c0       	rjmp	.+8      	; 0x162 <relay_enable+0x26>
			stop_signal(RELAY_OFF_PIN);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	b1 df       	rcall	.-158    	; 0xc0 <stop_signal>
			
			return SOFT_GROUND_FAULT;
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <relay_enable+0x2a>
 16a:	00 00       	nop
		}
		
		_delay_ms(1);
		tc++;
 16c:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 170:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
 17a:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
enum State relay_enable(void) {
	start_signal(RELAY_OFF_PIN);
	
	tc = 0;
	
	while (tc < RELAY_POWER_TIME) {		
 17e:	60 91 80 3f 	lds	r22, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 182:	70 91 81 3f 	lds	r23, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 186:	07 2e       	mov	r0, r23
 188:	00 0c       	add	r0, r0
 18a:	88 0b       	sbc	r24, r24
 18c:	99 0b       	sbc	r25, r25
 18e:	4a d1       	rcall	.+660    	; 0x424 <__floatsisf>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e8       	ldi	r19, 0x80	; 128
 194:	4b eb       	ldi	r20, 0xBB	; 187
 196:	54 e4       	ldi	r21, 0x44	; 68
 198:	3e d1       	rcall	.+636    	; 0x416 <__cmpsf2>
 19a:	88 23       	and	r24, r24
 19c:	b4 f2       	brlt	.-84     	; 0x14a <relay_enable+0xe>
		
		_delay_ms(1);
		tc++;
	}
	
	stop_signal(RELAY_OFF_PIN);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8f df       	rcall	.-226    	; 0xc0 <stop_signal>
	
	start_signal(RELAY_ON_PIN);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	7d df       	rcall	.-262    	; 0xa0 <start_signal>
	
	tc = 0;
 1a6:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <__DATA_REGION_ORIGIN__>
 1aa:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	while (tc < RELAY_POWER_TIME) {
 1ae:	1a c0       	rjmp	.+52     	; 0x1e4 <relay_enable+0xa8>
		if (!is_high(GFI_PIN)) {
 1b0:	1f 92       	push	r1
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	8f 93       	push	r24
 1b6:	4f df       	rcall	.-354    	; 0x56 <is_high>
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	81 11       	cpse	r24, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <relay_enable+0x8c>
			stop_signal(RELAY_ON_PIN);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	7e df       	rcall	.-260    	; 0xc0 <stop_signal>
			
			return SOFT_GROUND_FAULT;
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	08 95       	ret
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <relay_enable+0x90>
 1d0:	00 00       	nop
		}
		
		_delay_ms(1);
		tc++;
 1d2:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 1d6:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
 1e0:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	start_signal(RELAY_ON_PIN);
	
	tc = 0;
	
	while (tc < RELAY_POWER_TIME) {
 1e4:	60 91 80 3f 	lds	r22, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 1e8:	70 91 81 3f 	lds	r23, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	07 2e       	mov	r0, r23
 1ee:	00 0c       	add	r0, r0
 1f0:	88 0b       	sbc	r24, r24
 1f2:	99 0b       	sbc	r25, r25
 1f4:	17 d1       	rcall	.+558    	; 0x424 <__floatsisf>
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e8       	ldi	r19, 0x80	; 128
 1fa:	4b eb       	ldi	r20, 0xBB	; 187
 1fc:	54 e4       	ldi	r21, 0x44	; 68
 1fe:	0b d1       	rcall	.+534    	; 0x416 <__cmpsf2>
 200:	88 23       	and	r24, r24
 202:	b4 f2       	brlt	.-84     	; 0x1b0 <relay_enable+0x74>
		
		_delay_ms(1);
		tc++;
	}
	
	stop_signal(RELAY_ON_PIN);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	5c df       	rcall	.-328    	; 0xc0 <stop_signal>
	
	if (fault_count == 0) {
 208:	80 91 82 3f 	lds	r24, 0x3F82	; 0x803f82 <fault_count>
 20c:	81 11       	cpse	r24, r1
 20e:	02 c0       	rjmp	.+4      	; 0x214 <relay_enable+0xd8>
		return RELAY_ON;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	08 95       	ret
	} else {
		return PROBATIONARY_RELAY_ON;
 214:	87 e0       	ldi	r24, 0x07	; 7
	}
}
 216:	08 95       	ret

00000218 <relay_on>:
 * Possible Return States:
 *     - SOFT_GROUND_FAULT
 *     - RELAY_DISABLE
 */
enum State relay_on(void) {
	while (is_high(OPENWRT_PIN, EBIKE_PIN)) {
 218:	08 c0       	rjmp	.+16     	; 0x22a <relay_on+0x12>
		if (is_high(GFI_PIN)) {
 21a:	1f 92       	push	r1
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	8f 93       	push	r24
 220:	1a df       	rcall	.-460    	; 0x56 <is_high>
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	81 11       	cpse	r24, r1
 228:	0e c0       	rjmp	.+28     	; 0x246 <relay_on+0x2e>
 * Possible Return States:
 *     - SOFT_GROUND_FAULT
 *     - RELAY_DISABLE
 */
enum State relay_on(void) {
	while (is_high(OPENWRT_PIN, EBIKE_PIN)) {
 22a:	1f 92       	push	r1
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	8f 93       	push	r24
 230:	1f 92       	push	r1
 232:	1f 92       	push	r1
 234:	10 df       	rcall	.-480    	; 0x56 <is_high>
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	81 11       	cpse	r24, r1
 240:	ec cf       	rjmp	.-40     	; 0x21a <relay_on+0x2>
		if (is_high(GFI_PIN)) {
			return SOFT_GROUND_FAULT;
		}
	}
		
	return RELAY_DISABLE;
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	08 95       	ret
 *     - RELAY_DISABLE
 */
enum State relay_on(void) {
	while (is_high(OPENWRT_PIN, EBIKE_PIN)) {
		if (is_high(GFI_PIN)) {
			return SOFT_GROUND_FAULT;
 246:	85 e0       	ldi	r24, 0x05	; 5
		}
	}
		
	return RELAY_DISABLE;
}
 248:	08 95       	ret

0000024a <relay_disable>:
 * Possible Return States:
 *     - SOFT_GROUND_FAULT
 *     - RELAY_OFF
 */
enum State relay_disable(void) {
	start_signal(RELAY_ON_PIN);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	29 df       	rcall	.-430    	; 0xa0 <start_signal>
	
	tc = 0;
 24e:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <__DATA_REGION_ORIGIN__>
 252:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	while (tc < RELAY_POWER_TIME) {		
 256:	1a c0       	rjmp	.+52     	; 0x28c <relay_disable+0x42>
		if (!is_high(GFI_PIN)) {
 258:	1f 92       	push	r1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	8f 93       	push	r24
 25e:	fb de       	rcall	.-522    	; 0x56 <is_high>
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	81 11       	cpse	r24, r1
 266:	04 c0       	rjmp	.+8      	; 0x270 <relay_disable+0x26>
			stop_signal(RELAY_ON_PIN);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	2a df       	rcall	.-428    	; 0xc0 <stop_signal>
			
			return SOFT_GROUND_FAULT;
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	08 95       	ret
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <relay_disable+0x2a>
 278:	00 00       	nop
		}
		
		_delay_ms(1);
		tc++;
 27a:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 27e:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
 288:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
enum State relay_disable(void) {
	start_signal(RELAY_ON_PIN);
	
	tc = 0;
	
	while (tc < RELAY_POWER_TIME) {		
 28c:	60 91 80 3f 	lds	r22, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 290:	70 91 81 3f 	lds	r23, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 294:	07 2e       	mov	r0, r23
 296:	00 0c       	add	r0, r0
 298:	88 0b       	sbc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	c3 d0       	rcall	.+390    	; 0x424 <__floatsisf>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e8       	ldi	r19, 0x80	; 128
 2a2:	4b eb       	ldi	r20, 0xBB	; 187
 2a4:	54 e4       	ldi	r21, 0x44	; 68
 2a6:	b7 d0       	rcall	.+366    	; 0x416 <__cmpsf2>
 2a8:	88 23       	and	r24, r24
 2aa:	b4 f2       	brlt	.-84     	; 0x258 <relay_disable+0xe>
		
		_delay_ms(1);
		tc++;
	}
	
	stop_signal(RELAY_ON_PIN);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 df       	rcall	.-496    	; 0xc0 <stop_signal>
	
	start_signal(RELAY_OFF_PIN);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	f6 de       	rcall	.-532    	; 0xa0 <start_signal>
	
	tc = 0;
 2b4:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <__DATA_REGION_ORIGIN__>
 2b8:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	while (tc < RELAY_POWER_TIME) {
 2bc:	1a c0       	rjmp	.+52     	; 0x2f2 <relay_disable+0xa8>
		if (!is_high(GFI_PIN)) {
 2be:	1f 92       	push	r1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	8f 93       	push	r24
 2c4:	c8 de       	rcall	.-624    	; 0x56 <is_high>
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	81 11       	cpse	r24, r1
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <relay_disable+0x8c>
			stop_signal(RELAY_OFF_PIN);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	f7 de       	rcall	.-530    	; 0xc0 <stop_signal>
			
			return SOFT_GROUND_FAULT;
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	08 95       	ret
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <relay_disable+0x90>
 2de:	00 00       	nop
		}
		
		_delay_ms(1);
		tc++;
 2e0:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 2e4:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
 2ee:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	start_signal(RELAY_OFF_PIN);
	
	tc = 0;
	
	while (tc < RELAY_POWER_TIME) {
 2f2:	60 91 80 3f 	lds	r22, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 2f6:	70 91 81 3f 	lds	r23, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 2fa:	07 2e       	mov	r0, r23
 2fc:	00 0c       	add	r0, r0
 2fe:	88 0b       	sbc	r24, r24
 300:	99 0b       	sbc	r25, r25
 302:	90 d0       	rcall	.+288    	; 0x424 <__floatsisf>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e8       	ldi	r19, 0x80	; 128
 308:	4b eb       	ldi	r20, 0xBB	; 187
 30a:	54 e4       	ldi	r21, 0x44	; 68
 30c:	84 d0       	rcall	.+264    	; 0x416 <__cmpsf2>
 30e:	88 23       	and	r24, r24
 310:	b4 f2       	brlt	.-84     	; 0x2be <relay_disable+0x74>
		
		_delay_ms(1);
		tc++;
	}
	
	stop_signal(RELAY_OFF_PIN);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	d5 de       	rcall	.-598    	; 0xc0 <stop_signal>
	
	return RELAY_OFF;
 316:	81 e0       	ldi	r24, 0x01	; 1
}
 318:	08 95       	ret

0000031a <soft_ground_fault>:
 *     - RELAY_ENABLE
 */
enum State soft_ground_fault(void) {
	// TODO
	
	fault_count++;
 31a:	80 91 82 3f 	lds	r24, 0x3F82	; 0x803f82 <fault_count>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 82 3f 	sts	0x3F82, r24	; 0x803f82 <fault_count>
	
	if (fault_count >= FAULT_LIMIT) {
 324:	80 91 82 3f 	lds	r24, 0x3F82	; 0x803f82 <fault_count>
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	44 97       	sbiw	r24, 0x14	; 20
 32c:	5c f4       	brge	.+22     	; 0x344 <soft_ground_fault+0x2a>
 32e:	2f e6       	ldi	r18, 0x6F	; 111
 330:	8f e6       	ldi	r24, 0x6F	; 111
 332:	98 e9       	ldi	r25, 0x98	; 152
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <soft_ground_fault+0x1a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <soft_ground_fault+0x24>
 33e:	00 00       	nop
		return HARD_GROUND_FAULT;
	} else {
		_delay_ms(GROUND_FAULT_DELAY_TIME);
		
		return RELAY_ENABLE;
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	08 95       	ret
	// TODO
	
	fault_count++;
	
	if (fault_count >= FAULT_LIMIT) {
		return HARD_GROUND_FAULT;
 344:	86 e0       	ldi	r24, 0x06	; 6
	} else {
		_delay_ms(GROUND_FAULT_DELAY_TIME);
		
		return RELAY_ENABLE;
	}
}
 346:	08 95       	ret

00000348 <probationary_relay_on>:
 *     - RELAY_DISABLE
 *     - SOFT_GROUND_FAULT
 *     - RELAY_ON
 */
enum State probationary_relay_on(void) {
	tc = 0;
 348:	10 92 80 3f 	sts	0x3F80, r1	; 0x803f80 <__DATA_REGION_ORIGIN__>
 34c:	10 92 81 3f 	sts	0x3F81, r1	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
	
	while (tc < PROBATION_TIME) {
 350:	26 c0       	rjmp	.+76     	; 0x39e <probationary_relay_on+0x56>
		if (!is_high(OPENWRT_PIN, EBIKE_PIN)) {			
 352:	1f 92       	push	r1
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8f 93       	push	r24
 358:	1f 92       	push	r1
 35a:	1f 92       	push	r1
 35c:	7c de       	rcall	.-776    	; 0x56 <is_high>
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	81 11       	cpse	r24, r1
 368:	04 c0       	rjmp	.+8      	; 0x372 <probationary_relay_on+0x2a>
			fault_count = 0;
 36a:	10 92 82 3f 	sts	0x3F82, r1	; 0x803f82 <fault_count>
			
			return RELAY_DISABLE;
 36e:	84 e0       	ldi	r24, 0x04	; 4
 370:	08 95       	ret
		}
		
		if (!is_high(GFI_PIN)) {
 372:	1f 92       	push	r1
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8f 93       	push	r24
 378:	6e de       	rcall	.-804    	; 0x56 <is_high>
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	88 23       	and	r24, r24
 380:	11 f1       	breq	.+68     	; 0x3c6 <probationary_relay_on+0x7e>
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <probationary_relay_on+0x3e>
 38a:	00 00       	nop
			return SOFT_GROUND_FAULT;
		}
		
		_delay_ms(1);
		tc++;
 38c:	80 91 80 3f 	lds	r24, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 390:	90 91 81 3f 	lds	r25, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	80 93 80 3f 	sts	0x3F80, r24	; 0x803f80 <__DATA_REGION_ORIGIN__>
 39a:	90 93 81 3f 	sts	0x3F81, r25	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 *     - RELAY_ON
 */
enum State probationary_relay_on(void) {
	tc = 0;
	
	while (tc < PROBATION_TIME) {
 39e:	60 91 80 3f 	lds	r22, 0x3F80	; 0x803f80 <__DATA_REGION_ORIGIN__>
 3a2:	70 91 81 3f 	lds	r23, 0x3F81	; 0x803f81 <__DATA_REGION_ORIGIN__+0x1>
 3a6:	07 2e       	mov	r0, r23
 3a8:	00 0c       	add	r0, r0
 3aa:	88 0b       	sbc	r24, r24
 3ac:	99 0b       	sbc	r25, r25
 3ae:	3a d0       	rcall	.+116    	; 0x424 <__floatsisf>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	4a e7       	ldi	r20, 0x7A	; 122
 3b6:	54 e4       	ldi	r21, 0x44	; 68
 3b8:	2e d0       	rcall	.+92     	; 0x416 <__cmpsf2>
 3ba:	88 23       	and	r24, r24
 3bc:	54 f2       	brlt	.-108    	; 0x352 <probationary_relay_on+0xa>
		
		_delay_ms(1);
		tc++;
	}
	
	fault_count = 0;
 3be:	10 92 82 3f 	sts	0x3F82, r1	; 0x803f82 <fault_count>
	
	return RELAY_ON;
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	08 95       	ret
			
			return RELAY_DISABLE;
		}
		
		if (!is_high(GFI_PIN)) {
			return SOFT_GROUND_FAULT;
 3c6:	85 e0       	ldi	r24, 0x05	; 5
	}
	
	fault_count = 0;
	
	return RELAY_ON;
}
 3c8:	08 95       	ret

000003ca <hard_ground_fault>:
 * of it
 *
 * Possible Return States:
 *     - NONE
 */
void hard_ground_fault(void) {
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <hard_ground_fault>

000003cc <state_machine>:

/**
 * Calls different states to run and controls switches between them.
 */
void state_machine(void) {
	enum State current_state = START;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
	
	while (1) {
		if (current_state == START) {
 3ce:	81 11       	cpse	r24, r1
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <state_machine+0xa>
			current_state = start();
 3d2:	86 de       	rcall	.-756    	; 0xe0 <start>
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <state_machine+0x2>
		} else if (current_state == RELAY_OFF) {
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	11 f4       	brne	.+4      	; 0x3de <state_machine+0x12>
			current_state = relay_off();
 3da:	a2 de       	rcall	.-700    	; 0x120 <relay_off>
 3dc:	f8 cf       	rjmp	.-16     	; 0x3ce <state_machine+0x2>
		} else if (current_state == RELAY_ENABLE) {
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <state_machine+0x1a>
			current_state = relay_enable();
 3e2:	ac de       	rcall	.-680    	; 0x13c <relay_enable>
 3e4:	f4 cf       	rjmp	.-24     	; 0x3ce <state_machine+0x2>
		} else if (current_state == RELAY_ON) {
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	11 f4       	brne	.+4      	; 0x3ee <state_machine+0x22>
			current_state = relay_on();
 3ea:	16 df       	rcall	.-468    	; 0x218 <relay_on>
 3ec:	f0 cf       	rjmp	.-32     	; 0x3ce <state_machine+0x2>
		} else if (current_state == RELAY_DISABLE) {
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <state_machine+0x2a>
			current_state = relay_disable();
 3f2:	2b df       	rcall	.-426    	; 0x24a <relay_disable>
 3f4:	ec cf       	rjmp	.-40     	; 0x3ce <state_machine+0x2>
		} else if (current_state == SOFT_GROUND_FAULT) {
 3f6:	85 30       	cpi	r24, 0x05	; 5
 3f8:	11 f4       	brne	.+4      	; 0x3fe <state_machine+0x32>
			current_state = soft_ground_fault();
 3fa:	8f df       	rcall	.-226    	; 0x31a <soft_ground_fault>
 3fc:	e8 cf       	rjmp	.-48     	; 0x3ce <state_machine+0x2>
		} else if (current_state == HARD_GROUND_FAULT) {
 3fe:	86 30       	cpi	r24, 0x06	; 6
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			hard_ground_fault();
 402:	e3 df       	rcall	.-58     	; 0x3ca <hard_ground_fault>
		} else if (current_state == PROBATIONARY_RELAY_ON) {
 404:	87 30       	cpi	r24, 0x07	; 7
 406:	11 f4       	brne	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			current_state = probationary_relay_on();
 408:	9f df       	rcall	.-194    	; 0x348 <probationary_relay_on>
 40a:	e1 cf       	rjmp	.-62     	; 0x3ce <state_machine+0x2>
 40c:	08 95       	ret

0000040e <main>:
/*                             MAIN FUNCTION                            */
/************************************************************************/


int main(void) {
	state_machine();
 40e:	de df       	rcall	.-68     	; 0x3cc <state_machine>
	
	return 0;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	08 95       	ret

00000416 <__cmpsf2>:
 416:	0e 94 4d 02 	call	0x49a	; 0x49a <__fp_cmp>
 41a:	08 f4       	brcc	.+2      	; 0x41e <__cmpsf2+0x8>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret

00000420 <__floatunsisf>:
 420:	e8 94       	clt
 422:	09 c0       	rjmp	.+18     	; 0x436 <__floatsisf+0x12>

00000424 <__floatsisf>:
 424:	97 fb       	bst	r25, 7
 426:	3e f4       	brtc	.+14     	; 0x436 <__floatsisf+0x12>
 428:	90 95       	com	r25
 42a:	80 95       	com	r24
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	99 23       	and	r25, r25
 438:	a9 f0       	breq	.+42     	; 0x464 <__floatsisf+0x40>
 43a:	f9 2f       	mov	r31, r25
 43c:	96 e9       	ldi	r25, 0x96	; 150
 43e:	bb 27       	eor	r27, r27
 440:	93 95       	inc	r25
 442:	f6 95       	lsr	r31
 444:	87 95       	ror	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b7 95       	ror	r27
 44c:	f1 11       	cpse	r31, r1
 44e:	f8 cf       	rjmp	.-16     	; 0x440 <__floatsisf+0x1c>
 450:	fa f4       	brpl	.+62     	; 0x490 <__floatsisf+0x6c>
 452:	bb 0f       	add	r27, r27
 454:	11 f4       	brne	.+4      	; 0x45a <__floatsisf+0x36>
 456:	60 ff       	sbrs	r22, 0
 458:	1b c0       	rjmp	.+54     	; 0x490 <__floatsisf+0x6c>
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	16 c0       	rjmp	.+44     	; 0x490 <__floatsisf+0x6c>
 464:	88 23       	and	r24, r24
 466:	11 f0       	breq	.+4      	; 0x46c <__floatsisf+0x48>
 468:	96 e9       	ldi	r25, 0x96	; 150
 46a:	11 c0       	rjmp	.+34     	; 0x48e <__floatsisf+0x6a>
 46c:	77 23       	and	r23, r23
 46e:	21 f0       	breq	.+8      	; 0x478 <__floatsisf+0x54>
 470:	9e e8       	ldi	r25, 0x8E	; 142
 472:	87 2f       	mov	r24, r23
 474:	76 2f       	mov	r23, r22
 476:	05 c0       	rjmp	.+10     	; 0x482 <__floatsisf+0x5e>
 478:	66 23       	and	r22, r22
 47a:	71 f0       	breq	.+28     	; 0x498 <__floatsisf+0x74>
 47c:	96 e8       	ldi	r25, 0x86	; 134
 47e:	86 2f       	mov	r24, r22
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	2a f0       	brmi	.+10     	; 0x490 <__floatsisf+0x6c>
 486:	9a 95       	dec	r25
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	da f7       	brpl	.-10     	; 0x486 <__floatsisf+0x62>
 490:	88 0f       	add	r24, r24
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	97 f9       	bld	r25, 7
 498:	08 95       	ret

0000049a <__fp_cmp>:
 49a:	99 0f       	add	r25, r25
 49c:	00 08       	sbc	r0, r0
 49e:	55 0f       	add	r21, r21
 4a0:	aa 0b       	sbc	r26, r26
 4a2:	e0 e8       	ldi	r30, 0x80	; 128
 4a4:	fe ef       	ldi	r31, 0xFE	; 254
 4a6:	16 16       	cp	r1, r22
 4a8:	17 06       	cpc	r1, r23
 4aa:	e8 07       	cpc	r30, r24
 4ac:	f9 07       	cpc	r31, r25
 4ae:	c0 f0       	brcs	.+48     	; 0x4e0 <__fp_cmp+0x46>
 4b0:	12 16       	cp	r1, r18
 4b2:	13 06       	cpc	r1, r19
 4b4:	e4 07       	cpc	r30, r20
 4b6:	f5 07       	cpc	r31, r21
 4b8:	98 f0       	brcs	.+38     	; 0x4e0 <__fp_cmp+0x46>
 4ba:	62 1b       	sub	r22, r18
 4bc:	73 0b       	sbc	r23, r19
 4be:	84 0b       	sbc	r24, r20
 4c0:	95 0b       	sbc	r25, r21
 4c2:	39 f4       	brne	.+14     	; 0x4d2 <__fp_cmp+0x38>
 4c4:	0a 26       	eor	r0, r26
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <__fp_cmp+0x46>
 4c8:	23 2b       	or	r18, r19
 4ca:	24 2b       	or	r18, r20
 4cc:	25 2b       	or	r18, r21
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__fp_cmp+0x3e>
 4d0:	08 95       	ret
 4d2:	0a 26       	eor	r0, r26
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <__fp_cmp+0x3e>
 4d6:	a1 40       	sbci	r26, 0x01	; 1
 4d8:	a6 95       	lsr	r26
 4da:	8f ef       	ldi	r24, 0xFF	; 255
 4dc:	81 1d       	adc	r24, r1
 4de:	81 1d       	adc	r24, r1
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
